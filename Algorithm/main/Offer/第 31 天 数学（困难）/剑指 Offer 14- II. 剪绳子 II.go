/*
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

 

示例 1：

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
 

提示：

2 <= n <= 1000

*/
package main

// 我的题解： 数字 3
/*
执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户
内存消耗：1.8 MB, 在所有 Go 提交中击败了90.91%的用户
*/

func cuttingRope(n int) int {
	if n == 2{
		return 1
	}
	if n == 3{
		return 2
	}

	a := n/3
	b := n%3
	if b == 1{
		a--
		b = 4
	} else if b == 0{
		b = 1
	}

	res := b
	for i:=0;i<a;i++{
		res = res*3%1000000007
	}

	return res
}