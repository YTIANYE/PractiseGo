package main

import "fmt"

// 一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n级的台阶总共有多少种跳法。
// 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
//
// 示例 1：
// 输入：n = 2
// 输出：2
// 示例 2：
//
// 输入：n = 7
// 输出：21
// 示例 3：
//
// 输入：n = 0
// 输出：1
// 提示：
//
// 0 <= n <= 100


/*分析
f(n) = f(n-1) + f(n - 2) * 2

n = 2
1 1
2

n = 3
1 1 1
1 2
2 1

n = 4

1 1 1 1
1 2 1
2 1 1

1 1 2
2 2

*/

// 我的题解
// 执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户
// 内存消耗：1.9 MB, 在所有 Go 提交中击败了72.17%的用户
func numWays(n int) int {
	// 官方写法: 前期处理的很巧妙
	// 执行用时：0 ms, 在所有 Go 提交中击败了100.00% 的用户
	// 内存消耗：1.9 MB, 在所有 Go 提交中击败了100.00% 的用户

	a:=1
	b:=1
	for i:=0; i<n; i++ {
		a, b = b, a + b
		b %= 1000000007
	}
	return a




	//我的写法
	// if n == 0{
	// 	return 1
	// }
	// if n == 1 || n == 2 {
	// 	return n
	// }
	//
	// num1 := 1
	// num2 := 2
	// for i := 3; i <= n; i++ {
	// 	num2, num1 = num2 + num1, num2
	// 	// num3 := num2 + num1
	// 	// num1 = num2
	// 	// num2 = num3
	// 	num2 = num2 % 1000000007		// Go语言在return时取余，之前的数会溢出成负数
	// }
	// return num2


}

func main(){
	n := 7
	// n:= 44
	// n := 92
	fmt.Println(numWays(n))
}
